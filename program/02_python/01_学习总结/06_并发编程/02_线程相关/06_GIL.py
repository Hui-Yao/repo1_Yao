#!/usr/bin/env python
#-*- coding:utf-8 -*-
# Author = "Hui_Yao"


'''一些基础概念：
1.程序是如何被执行的？
    计算机并不能识别高级语言，只能识别0101的机器语言，所以需要进行翻译，将我们编写的高级语言翻译为机器语言。
  对于C语言：
    C源程序集中被翻译为机器指令，并打包。而后在运行时无需再次翻译，直接执行翻译后的机器指令。所以执行效高。
    常见的编译型语言：C，C++，object-c
  对于python:
    python是边解释边执行的，但是对于其中的重复部分（如导入的模块），会生成.pyc格式的字节码，以提高执行效率。
    但是相对来讲，解释型语言的执行效率低于编译型语言。
    常见的解释型语言：python，java，ruby

2. 什么是SED，IDE？
    SDE(software development environment)是指软件开发环境，其中安装了程序运行所需要的依赖包，举例如anaconda。
    IDE(integrated development environment)是指集成开发环境，及软件编译与执行于一身，举例如pycharm。

2. 什么是Python解释器，常见的有哪些？
    将python语言进行翻译的就是python解释器。
    常见的python解释器：cpython（官方）、Jython、pypy、ironpython

'''

'''GIL互斥锁：
1. 明明有了mutex互斥锁，为什么还需要GIL互斥锁？
      mutex保证的是我们自己编写的多个线程对于修改数据的安全性（比如我们编写了两个线程a和b，mutex保证的是当a在修改数据时，
    b不能修改数据），但是实际上一个python进程中不止有我们编写的线程，还有解释器级别的如垃圾回收机制线程的其他线程，
    垃圾回收线程也会对数据进行修改。但是我们无法给它加锁，所以我们的数据还可能是不安全的。
      于是cpython解释器自带了GIL锁，其作用是保证一个python进程在同一时间只能有一个线程在运行。但是如果一个线程遇到了
    I/O堵塞（或sleep之类的），则该线程会自动释放GIl锁，cpu转而取执行其他线程。当前一个线程的IO堵塞解决时，该线程会再去
    抢GIl锁，抢到了就继续释放前的状态执行。
       这也说明只有GIL锁也是不行的，需要GIL与mutex配合使用。
2. 什么时候用线程，什么时候用多进程？
    cpu的作用是计算，也是就说，当计算量大时，cpu越多，越省时间。但是如果程序的IO部分量很大，这就不是cpu能处理的范围了。
    
    计算密集时，使用多进程
    I/O密集时，使用多线程



'''
