#!/usr/bin/env python
#-*- coding:utf-8 -*-
# Author = "Hui_Yao"

'''生成器：
1.定义：通过某种算法可以得到列表中的所有元素，但是每次只会储存调用到的数据，其他数据并不会生成，也就没有浪费空间
2.语法： (1)将列表生成式的中括号变为小括号（适用于创建简单的列表生成器）
        (2)将函数中的print（）替换成yield（），yield用于保存该生成器上一次的进行到的位置。（可创建复杂的生成器）
            yield一定要放在循环里面，计算代码放在yield下面，这样才能实现循环生成数据
3.   __next__()方法用来取当前数据的下一个数据；用next（）函数也可以取依次取生成器中的元素。这两个的效果完全相同。

    注：不能像列表那样用索引（a[1]）直接调用数据，因为还没生成。



'''

def fib(n):       #这里的n代表的是最大的取值次数
    "斐波那契数列生成器"
    count,a,b = 0,0,1

    while 1:
        yield b     #就是将函数里输出语句的print（）改为yield就好了
        a,b = b,a+b
        count += 1
        if count >= n:
            break
'''
yield：暂停，屈服
函数运行到yield语句会暂停运行，并将yield后的数据返回
yield在循环中，后面每次调用生成器时，首先会跳到yield，
然后只执行yield下面的语句，每一次调用生成器就将yield下的语句执行一遍
'''

f = fib(10)
print(next(f))          #next()和 .__next__()是等效的
print(f.__next__())     #第一个__next__()是使程序先走到yield，通俗来讲就是完成生成器的初始化
print(f.__next__())     #所以yield上面不应爱有输出语句
print(f.__next__())