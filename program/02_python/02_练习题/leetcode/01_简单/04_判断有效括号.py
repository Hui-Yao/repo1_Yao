'''
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：
    左括号必须用相同类型的右括号闭合。
    左括号必须以正确的顺序闭合。
    注意空字符串可被认为是有效字符串。
示例：
    "()[]{}"：True    "{[]}"：True   "([)]"：False      ''：True

分析：由示例可知，括号必须是一对左右括号相并列或者是包含。不管是并列还是相互包含，那么碰到的第一个右括号，他的前一个一定是与他相匹配的左括号。
    那么应该从内部，从小的有效括号开始，一层一层向外剥离，直到所有左右括号都匹配完，否则判定为无效括号字符串。
    像示例二的相互穿插，是无效的。
    这正好与栈的结构特点匹配：先进后出，后进先出。
'''



def idvalid(s):
    stack = ['#']   #维护一个stack栈来记录所有的左括号。给stack初始值为'#'的原因是空列表使用pop方法会报错
    bracket_dict = {')':'(', ']':'[', '}':'{', }
    for i in s:
        if i in bracket_dict:
            top_element = stack.pop()
            if top_element != bracket_dict[i]:  #遇到一个右括号则判断栈顶元素是否匹配，匹配则继续检测别的元素，不匹配直接判False
                return False
        else:
            stack.append(i)  #左括号加入stack中
    return len(stack) == 1  #stack的元素数量最后为一，说明所有元素由匹配完了

print(idvalid(''))
# print(idvalid('([]([]))'))


